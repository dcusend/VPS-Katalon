import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.checkpoint.CheckpointFactory as CheckpointFactory
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as MobileBuiltInKeywords
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testcase.TestCaseFactory as TestCaseFactory
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testdata.TestDataFactory as TestDataFactory
import com.kms.katalon.core.testobject.ObjectRepository as ObjectRepository
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WSBuiltInKeywords
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUiBuiltInKeywords
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.webui.driver.DriverFactory as DriverFactory
import com.kms.katalon.core.webui.driver.KatalonWebDriverBackedSelenium
import static com.kms.katalon.core.webui.driver.KatalonWebDriverBackedSelenium.*

import com.thoughtworks.selenium.Selenium
import org.openqa.selenium.Keys
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.WebDriver
import static org.junit.Assert.*
import java.util.concurrent.Callable
import java.util.regex.Pattern
import static org.apache.commons.lang3.StringUtils.join

'----------------------------------------------------'
'This test case script is generated by Katalon Studio'
'Generated date: 11-Jul-2023 07:29:58 PM'
'File path: C:\\Users\\imtiaz\\Documents\\Sel-New\\Prod-AdminSuite-NonBootstrap\\Prod-AdminSuite-NonBootstrap.side'
'Generated by: iahmed@govolution.com'
'----------------------------------------------------'

String baseUrl = ""

WebUI.openBrowser('')

selenium = new KatalonWebDriverBackedSelenium(baseUrl)

"open | https://www.velocitypayment.com/admin/testcustomer |  | "
selenium.open("https://www.velocitypayment.com/admin/testcustomer")

"pause | 2000 |  | "
Thread.sleep("2000")

"type | id=okta-signin-username | iahmed | "
selenium.type("id=okta-signin-username", "iahmed")

"type | id=okta-signin-password | Hello!2222222 | "
selenium.type("id=okta-signin-password", "Hello!2222222")

"click | id=okta-signin-submit |  | "
selenium.click("id=okta-signin-submit")

"pause | 2000 |  | "
Thread.sleep("2000")

"click | link=Access User Management |  | "
selenium.click("link=Access User Management")

"pause | 2000 |  | "
Thread.sleep("2000")

"verifyElementPresent | link=Users |  | "
verifyTrue(selenium.isElementPresent("link=Users"))

"verifyElementPresent | link=Roles |  | "
verifyTrue(selenium.isElementPresent("link=Roles"))

"verifyElementPresent | link=Products |  | "
verifyTrue(selenium.isElementPresent("link=Products"))

"verifyElementPresent | link=AVS |  | "
verifyTrue(selenium.isElementPresent("link=AVS"))

"verifyElementPresent | link=CVV |  | "
verifyTrue(selenium.isElementPresent("link=CVV"))

"verifyElementPresent | link=Email Alerts |  | "
verifyTrue(selenium.isElementPresent("link=Email Alerts"))

"verifyTitle | V-Administrator - Users [Test Customer] |  | "
verifyEquals("V-Administrator - Users [Test Customer]", selenium.getTitle())

"verifyText | css=h1 | v+Administrator | "
verifyEquals("v+Administrator", selenium.getText("css=h1"))

"verifyText | css=h3 | exact:Users: | "
verifyEquals("exact:Users:", selenium.getText("css=h3"))

"verifyText | css=th | regexp:Users: Total Users:.* | "
verifyTrue(selenium.getText("css=th").matches("regexp:Users: Total Users:..*"))

"verifyText | link=ashwity indurkar | ashwity indurkar | "
verifyEquals("ashwity indurkar", selenium.getText("link=ashwity indurkar"))

"verifyElementPresent | link=2 |  | "
verifyTrue(selenium.isElementPresent("link=2"))

"verifyElementPresent | link=Next>> |  | "
verifyTrue(selenium.isElementPresent("link=Next>>"))

"verifyElementPresent | link=User Report |  | "
verifyTrue(selenium.isElementPresent("link=User Report"))

"verifyElementPresent | link=Find User |  | "
verifyTrue(selenium.isElementPresent("link=Find User"))

"verifyElementPresent | link=Add User |  | "
verifyTrue(selenium.isElementPresent("link=Add User"))

"verifyElementPresent | id=input-username-find |  | "
verifyTrue(selenium.isElementPresent("id=input-username-find"))

"verifyElementPresent | id=input-firstname-find |  | "
verifyTrue(selenium.isElementPresent("id=input-firstname-find"))

"verifyElementPresent | id=input-lastname-find |  | "
verifyTrue(selenium.isElementPresent("id=input-lastname-find"))

"verifyElementPresent | name=search |  | "
verifyTrue(selenium.isElementPresent("name=search"))

"verifyElementPresent | css=input.button |  | "
verifyTrue(selenium.isElementPresent("css=input.button"))

"click | link=Roles |  | "
selenium.click("link=Roles")

"pause | 2000 |  | "
Thread.sleep("2000")

"verifyText | css=h3 | exact:Roles: | "
verifyEquals("exact:Roles:", selenium.getText("css=h3"))

"verifyText | css=th | regexp:Roles: Total Roles:.* | "
verifyTrue(selenium.getText("css=th").matches("regexp:Roles: Total Roles:..*"))

"verifyElementPresent | link=Administrator |  | "
verifyTrue(selenium.isElementPresent("link=Administrator"))

"verifyElementPresent | link=2 |  | "
verifyTrue(selenium.isElementPresent("link=2"))

"verifyElementPresent | link=Next>> |  | "
verifyTrue(selenium.isElementPresent("link=Next>>"))

"verifyElementPresent | link=Role Report |  | "
verifyTrue(selenium.isElementPresent("link=Role Report"))

"verifyElementPresent | link=Permission Report |  | "
verifyTrue(selenium.isElementPresent("link=Permission Report"))

"verifyElementPresent | link=Find Role |  | "
verifyTrue(selenium.isElementPresent("link=Find Role"))

"verifyElementPresent | link=Add Role |  | "
verifyTrue(selenium.isElementPresent("link=Add Role"))

"verifyElementPresent | id=input-username-find |  | "
verifyTrue(selenium.isElementPresent("id=input-username-find"))

"verifyElementPresent | name=search |  | "
verifyTrue(selenium.isElementPresent("name=search"))

"verifyElementPresent | css=input.button |  | "
verifyTrue(selenium.isElementPresent("css=input.button"))

"click | link=Products |  | "
selenium.click("link=Products")

"pause | 2000 |  | "
Thread.sleep("2000")

"verifyText | css=h2 | Products | "
verifyEquals("Products", selenium.getText("css=h2"))

"verifyText | id=maincontent-2col | regexp:The following is a list of product entitlements that you can manage using V-Administrator. Click the product for which you wish to view reports. You will be able to see all users and roles who have been granted permissions on the product as well as determine which users and roles have a particular permission.* | "
verifyTrue(selenium.getText("id=maincontent-2col").matches("regexp:The following is a list of product entitlements that you can manage using V-Administrator. Click the product for which you wish to view reports. You will be able to see all users and roles who have been granted permissions on the product as well as determine which users and roles have a particular permission..*"))

"verifyElementPresent | link=Virtual Terminal - Test App TSYS CPS |  | "
verifyTrue(selenium.isElementPresent("link=Virtual Terminal - Test App TSYS CPS"))

"verifyElementPresent | xpath=(//a[contains(text(),'Online Reporting')])[2] |  | "
verifyTrue(selenium.isElementPresent("xpath=(//a[contains(text(),'Online Reporting')])[2]"))

"verifyElementPresent | xpath=(//a[contains(text(),'User Management')])[2] |  | "
verifyTrue(selenium.isElementPresent("xpath=(//a[contains(text(),'User Management')])[2]"))

"verifyElementPresent | link=IVR - IWP Water Bill GovTest |  | "
verifyTrue(selenium.isElementPresent("link=IVR - IWP Water Bill GovTest"))

"verifyElementPresent | link=Scheduled Payments - IWP Water Bill GovTest |  | "
verifyTrue(selenium.isElementPresent("link=Scheduled Payments - IWP Water Bill GovTest"))

"verifyElementPresent | link=CSR - V-TPS test |  | "
verifyTrue(selenium.isElementPresent("link=CSR - V-TPS test"))

"verifyElementPresent | link=Integrated Billing - BWP License Fees GovTest |  | "
verifyTrue(selenium.isElementPresent("link=Integrated Billing - BWP License Fees GovTest"))

"verifyElementPresent | link=Customer Service Representative |  | "
verifyTrue(selenium.isElementPresent("link=Customer Service Representative"))

"verifyElementPresent | link=Integrated Billing Customer |  | "
verifyTrue(selenium.isElementPresent("link=Integrated Billing Customer"))

"click | link=AVS |  | "
selenium.click("link=AVS")

"pause | 2000 |  | "
Thread.sleep("2000")

"verifyText | css=h2 | AVS Policy Management | "
verifyEquals("AVS Policy Management", selenium.getText("css=h2"))

"verifyText | id=maincontent-2col | regexp:The following is a list of products whose AVS polices can be managed using V-Administrator. Click the product name to view the AVS policy in force for credit card transactions. You will then be able to modify the AVS policy if needed.* | "
verifyTrue(selenium.getText("id=maincontent-2col").matches("regexp:The following is a list of products whose AVS polices can be managed using V-Administrator. Click the product name to view the AVS policy in force for credit card transactions. You will then be able to modify the AVS policy if needed..*"))

"verifyElementPresent | link=Gateway - Test App TSYS CPS |  | "
verifyTrue(selenium.isElementPresent("link=Gateway - Test App TSYS CPS"))

"verifyElementPresent | link=Integrated Web Payments - IWP Water Bill GovTest |  | "
verifyTrue(selenium.isElementPresent("link=Integrated Web Payments - IWP Water Bill GovTest"))

"verifyElementPresent | link=Virtual Terminal - Test App TSYS CPS |  | "
verifyTrue(selenium.isElementPresent("link=Virtual Terminal - Test App TSYS CPS"))

"verifyElementPresent | link=Advanced Bill Presentment - BBP Parking Fees GovTest |  | "
verifyTrue(selenium.isElementPresent("link=Advanced Bill Presentment - BBP Parking Fees GovTest"))

"verifyElementPresent | link=IVR - V-TPS test |  | "
verifyTrue(selenium.isElementPresent("link=IVR - V-TPS test"))

"verifyElementPresent | link=Scheduled Payments - BWP License Fees GovTest |  | "
verifyTrue(selenium.isElementPresent("link=Scheduled Payments - BWP License Fees GovTest"))

"verifyElementPresent | link=Web Services Gateway - Melanie gateway Test |  | "
verifyTrue(selenium.isElementPresent("link=Web Services Gateway - Melanie gateway Test"))

"verifyElementPresent | link=CSR - BWP License Fees GovTest |  | "
verifyTrue(selenium.isElementPresent("link=CSR - BWP License Fees GovTest"))

"verifyElementPresent | link=Integrated Billing - BBP Parking Fees GovTest |  | "
verifyTrue(selenium.isElementPresent("link=Integrated Billing - BBP Parking Fees GovTest"))

"verifyElementPresent | link=PRESTO - Vericle Test App |  | "
verifyTrue(selenium.isElementPresent("link=PRESTO - Vericle Test App"))

"verifyElementPresent | link=SERVICES - BWP License Fees GovTest |  | "
verifyTrue(selenium.isElementPresent("link=SERVICES - BWP License Fees GovTest"))

"verifyElementPresent | link=Multiple Bill Payment - TestEnhanced MultiBill |  | "
verifyTrue(selenium.isElementPresent("link=Multiple Bill Payment - TestEnhanced MultiBill"))

"click | link=CVV |  | "
selenium.click("link=CVV")

"pause | 2000 |  | "
Thread.sleep("2000")

"verifyText | css=h2 | CVV Policy Management | "
verifyEquals("CVV Policy Management", selenium.getText("css=h2"))

"verifyText | id=maincontent-2col | regexp:The following is a list of products whose CVV polices can be managed using V-Administrator. Click the product name to view the CVV policy in force for credit card transactions. You will then be able to modify the CVV policy if needed.* | "
verifyTrue(selenium.getText("id=maincontent-2col").matches("regexp:The following is a list of products whose CVV polices can be managed using V-Administrator. Click the product name to view the CVV policy in force for credit card transactions. You will then be able to modify the CVV policy if needed..*"))

"verifyElementPresent | link=Gateway - CPS DualCF |  | "
verifyTrue(selenium.isElementPresent("link=Gateway - CPS DualCF"))

"verifyElementPresent | link=Integrated Web Payments - Vrelay3.0 test |  | "
verifyTrue(selenium.isElementPresent("link=Integrated Web Payments - Vrelay3.0 test"))

"verifyElementPresent | link=Virtual Terminal - IWP Water Bill GovTest |  | "
verifyTrue(selenium.isElementPresent("link=Virtual Terminal - IWP Water Bill GovTest"))

"verifyElementPresent | link=Basic Bill Presentment - BBP Parking Fees GovTest |  | "
verifyTrue(selenium.isElementPresent("link=Basic Bill Presentment - BBP Parking Fees GovTest"))

"verifyElementPresent | link=IVR - V-TPS test |  | "
verifyTrue(selenium.isElementPresent("link=IVR - V-TPS test"))

"verifyElementPresent | link=Scheduled Payments - IWP Water Bill GovTest |  | "
verifyTrue(selenium.isElementPresent("link=Scheduled Payments - IWP Water Bill GovTest"))

"verifyElementPresent | link=CSR - IWP Water Bill GovTest |  | "
verifyTrue(selenium.isElementPresent("link=CSR - IWP Water Bill GovTest"))

"verifyElementPresent | link=Integrated Billing - BBP Parking Fees GovTest |  | "
verifyTrue(selenium.isElementPresent("link=Integrated Billing - BBP Parking Fees GovTest"))

"verifyElementPresent | link=PRESTO - Testing Vericle App |  | "
verifyTrue(selenium.isElementPresent("link=PRESTO - Testing Vericle App"))

"verifyElementPresent | link=SERVICES - IWP Water Bill GovTest |  | "
verifyTrue(selenium.isElementPresent("link=SERVICES - IWP Water Bill GovTest"))

"verifyElementPresent | link=Multiple Bill Payment - TestEnhanced MultiBill |  | "
verifyTrue(selenium.isElementPresent("link=Multiple Bill Payment - TestEnhanced MultiBill"))

"click | link=Email Alerts |  | "
selenium.click("link=Email Alerts")

"pause | 2000 |  | "
Thread.sleep("2000")

"verifyText | css=h2 | Email Alerts | "
verifyEquals("Email Alerts", selenium.getText("css=h2"))

"verifyText | id=emailAlertsContent-all | regexp:In order to setup an email alert for the members of a given Role, first select the Role from the list below. Then check one or more of the checkboxes associated with the available alerts and click the Save button to activate your selection. To edit an active email alert, first select the Role from the list below. Then check or uncheck one or more checkboxes associated with the available alerts, as desired, and click the Save button to update your selection.* | "
verifyTrue(selenium.getText("id=emailAlertsContent-all").matches("regexp:In order to setup an email alert for the members of a given Role, first select the Role from the list below. Then check one or more of the checkboxes associated with the available alerts and click the "Save" button to activate your selection. To edit an active email alert, first select the Role from the list below. Then check or uncheck one or more checkboxes associated with the available alerts, as desired, and click the "Save" button to update your selection..*"))

"verifyTitle | V-Administrator - Email Alerts [Test Customer] |  | "
verifyEquals("V-Administrator - Email Alerts [Test Customer]", selenium.getTitle())

"verifyElementPresent | link=Administrator |  | "
verifyTrue(selenium.isElementPresent("link=Administrator"))

"verifyElementPresent | name=vtriggerType |  | "
verifyTrue(selenium.isElementPresent("name=vtriggerType"))

"verifyElementPresent | link=2 |  | "
verifyTrue(selenium.isElementPresent("link=2"))

"verifyElementPresent | link=Next>> |  | "
verifyTrue(selenium.isElementPresent("link=Next>>"))

"verifyElementPresent | css=input[type=submit] |  | "
verifyTrue(selenium.isElementPresent("css=input[type='submit']"))

"click | link=Logout |  | "
selenium.click("link=Logout")
